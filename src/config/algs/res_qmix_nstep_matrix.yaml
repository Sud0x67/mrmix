# --- ReSQMIX specific parameters ---
# --- experiment name ---
name: "res_qmix_env=8_adam_td_lambda"
# --- common options ---
use_cuda: True # Use gpu by default unless it isn't available
seed: 369354119
# --- network architecture ---
mac: "res_qmix_mac"
agent: "n_rnn"
agent_output_type: q
rnn_hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: True # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation

mixer: "res_qmix"
hypernet_layers: 2
mixing_embed_dim: 32
hypernet_embed: 64

# --- action selector and epsilon anneal schedule ---
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 100000 # 50000 for 6h_vs_8z

# --- runner type and parameters ---
runner: "parallel"
# runner: "episode"
batch_size_run: 8 # 4 for 3s5z_vs_3s6z, buffer size = 2500
#batch_size_run: 1 # for replay

# --- replay buffer ---
buffer_size: 5000
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- learner type and learning parameters ---
learner: "res_qmix_learner"
optimizer: 'adam'
lr: 0.001 # Learning rate for agents
td_lambda: 0.6 # 0.3 for 6h_vs_8z
alpha: 0 # for res_qmix to weighted the loss of different q_tot
q_lambda: False
batch_size: 128
soft_update: False

t_max: 220000 # learn for 10050000 timesteps

# t_max: 10000 # for test
# update the target network every {} episodes
target_update_interval: 200
gamma: 0.99
# batch_size: 32 # Number of episodes to train on
critic_lr: 0.0005 # Learning rate for critics
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
save_model: False # Save the models to disk
save_model_interval: 20000 # Save models after this many timesteps 2000000

# local_results_path: "results" # Path to save model, results and replay
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps

test_nepisode: 32 # Number of episodes to test for
test_interval: 30 # 2000 Test after {} timesteps have passed # 1000 for matrix
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0

# ---evaluate and replay options
save_replay: False # Saving the replay of the model loaded from checkpoint_path
checkpoint_path: "" # Load a checkpoint from this path default ""
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
# checkpoint_path: "/home/bobo/code/pymarl2/results/models/res_qmix_env=8_adam_td_lambda__2021-05-28_10-56-46"

# --- Experiment running params ---
# you may better don't change this!!!
run: "default"